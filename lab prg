abstract class Employee{
    String name;
    int empId;
    double basicSalary;
 public Employee(String name,int empId,double basicSalary)
    {
       this.name=name;
       this.empId=empId;
       this.basicSalary=basicSalary;
    }
     abstract double calculateSalary();
     public void displaySalaryDetails(){
           System.out.println("Employee ID:"+empId);
           System.out.println("Name:"+name);
           System.out.println("Salary:$"+calculateSalary());
           System.out.println("-----------------------------");
      }
  }
 class FullTimeEmployee extends Employee{
      public FullTimeEmployee (String name,int empId,double basicSalary)
      {
         super(name,empId,basicSalary);
      }
      @Override
      double calculateSalary(){
          return basicSalary+(0.2*basicSalary);
      }
 }

 class partTimeEmployee extends Employee{
         private double hourlyRate;
         private int hoursWorked;
     public partTimeEmployee(String name,int empId,double basicSalary,int hourlyRate,int hoursWorked)
        {
           super(name,empId,basicSalary);
           this.hourlyRate=hourlyRate;
           this.hoursWorked=hoursWorked;
     }

    public partTimeEmployee(String name, int empId, double basicSalary) {
        super(name, empId, basicSalary);
    }
         @SuppressWarnings("override")
     double calculateSalary(){
           return basicSalary+(hourlyRate*hoursWorked);
           }
     }
      public class EmployeeManagementSystem{
     public static void main(String[] args){
           Employee emp1=new FullTimeEmployee("Alice",101,5000);
           Employee emp2=new partTimeEmployee("bob",102,2000,20,15);
           emp1.displaySalaryDetails();
           emp2.displaySalaryDetails();
       }
     } 

------------------------------------------------------------------------------------------------------------------------------------------
abstract class BankAccount{
    String accountNumber;
    String holderName;
    double balance;
    public BankAccount(String accountNumber, String holderName, double balance){
        this.accountNumber=accountNumber;
        this.holderName=holderName;
        this.balance=balance;
    }
    abstract double calculateInterest();
    public void deposit(double amount){
        balance+=amount;
        System.out.println("Deposit: "+amount+" NewBlance: "+balance);
    }
    public void withdraw(double amount){
        if(amount<=balance){
            balance-=amount;
            System.out.println("Withdraw :"+amount+" NewBalance: "+balance);
        }else{
            System.out.println("Insufficient Balance");
        }
    }

    public String getAccountNumber() {
        return accountNumber;
    }

    public void setAccountNumber(String accountNumber) {
        this.accountNumber = accountNumber;
    }

    public String getHolderName() {
        return holderName;
    }

    public void setHolderName(String holderName) {
        this.holderName = holderName;
    }
}
class SavingAccount extends BankAccount{
    public SavingAccount(String accountNumber, String holderName, double balance){
        super(accountNumber, holderName, balance);
    }
    @Override
    public double calculateInterest(){
        return balance*0.2;
    }
}
class currentAccount extends BankAccount{
    public currentAccount(String accountNumber, String holderName, double balance){
        super(accountNumber, holderName, balance);
    }
    @Override
    public double calculateInterest(){
        return balance*0.2;
    }
}
public class BankTest{
    public static void main(String[] args) {
        BankAccount savings= new SavingAccount("SA123", "Charlie", 10000);
        System.out.println("Savings Account Interest: "+savings.calculateInterest());
        savings.withdraw(3000);
        BankAccount current= new currentAccount("CA456", "David", 15000);
        System.out.println("Current Account Inerest: "+current.calculateInterest());
        current.deposit(7000);
        current.withdraw(5000);
    }
}
------------------------------------------------------------------------------------------------------------------------------------------
public class StudentGrades{
    
    
        public static void main(String[] args){
            int[] marks ={85,92,78,90,88};
            int total=0,max=marks[0],min=marks[0],countAboveAvg =0;
            for( int mark:marks){
                total+=mark;
                if(mark>max){
                    max=mark;
                }
                if(mark<min){
                    min=mark;
                }
            }
                   double Average=(double)total/marks.length;
                for(int i : marks){
                    if(i>Average){
                        countAboveAvg++;
                    }
                }
    
        System.out.println("Average Marks:"+Average);
        System.out.println("Highest Marks:"+max);
        System.out.println("Lowest Marks:"+min);
        System.out.println("Students scoring above Average :"+countAboveAvg);
        
    }
}
-------------------------------------------------------------------------------------------------------
class InventaryStock {
    public static void main(String[] args){
        int[] stock={10,5,0,8,3};
        int minStock=stock[0];
        int minindex=0;
        boolean outOfStock=false;
        for(int i=0;i<stock.length;i++){
            if(stock[i]<minStock){
                minStock=stock[i];
                minindex=i;
            }
            if(stock[i]==0){
                outOfStock=true;
            }
        }
        System.out.println("Product with lowest stock:product"+ (minindex+1) + "stock:" + minStock);
        System.out.println("is any product out of stock?"+(outOfStock?"yes":"No"));
    }
}
    

---------------------------------------------------------------------------------------------------------
public class temperatureMonitor{
    public static void main(String[] args){
        double[] temperature={30.5,32.0,28.3,35.2,31.7,29.8,33.1};
        double total = 0,maxTemp=temperature[0],minTemp=temperature[0];
        int hotDays=0;

        for(double temp:temperature){
            total+=temp;
            if(temp>maxTemp){
                maxTemp=temp;
            }
            if(temp<minTemp){
                minTemp=temp;
            }
        }   
            double avgTemp=total/temperature.length;
            for(double temp:temperature){
                if(temp>avgTemp){
                    hotDays++;
                }
            }
        System.out.println("Average Temperature:"+avgTemp);
        System.out.println("Hottest Temperature:"+maxTemp);
        System.out.println("Coldest Temperature:"+minTemp);
        System.out.println("No of days aboveAverage:"+hotDays);
    }
}
----------------------------------------------------------------------------------------------------------
import java.util.Scanner;

public class UsernameValidator {
    public static boolean isValidUsername(String username){
        return username.matches("[a-zA-Z0-9]{6,}");
    }
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        System.out.println("Enter a username:");
        String username=sc.next();

        if(isValidUsername(username)){
            System.out.println("valid username");
        }
        else{
            System.out.println("Invalid username");
        }
        sc.close();
    }
    
}
--------------------------------------------------------------------------------------------------------------
class Vehicle{
    protected String vehicleNumber;
    protected String brand;
    protected double dailyRate;
    public Vehicle (String vehicleNumber,String brand,double dailyRate){
        this.vehicleNumber=vehicleNumber;
        this.brand=brand;
        this.dailyRate=dailyRate;
    }
    public double calculateRent(int days){
        return dailyRate*days;
    }
    public void printRentalDEtails(int days){
        System.out.println("Vehicle number:"+vehicleNumber);
        System.out.println("Brand:"+brand);
        System.out.println("Total rent  for"+ days +"days is $"+calculateRent(days));
    }
}
class Car extends Vehicle{
    public Car (String vehicleNumber,String brand,double dailyRate){
        super(vehicleNumber,brand,dailyRate);
    }
    @Override
    public double calculateRent(int days){
        return dailyRate*days;
    }
}
class Bike extends Vehicle{
    public Bike (String vehicleNumber,String brand,double dailyRate){
        super(vehicleNumber,brand,dailyRate);
    }
    @Override
    public double calculateRent(int days){
        return dailyRate*days;
    }
}
public class vehicleRentalSystem{
    public static void main(String[] args) {
        Vehicle car=new Car("car 123","toyato",50);
        Vehicle bike=new Bike("bike 123","yamaha",20);
        System.out.println("car rental details");
        car.printRentalDEtails(5);
        System.out.println("Bike rental details");
        bike.printRentalDEtails(5);
    }
}
-----------------------------------------------------------------------------------------------------------------------------------------------------
abstract class Product{
    String productid,name;
     double price;

    public Product(String productid,String name,double price){
        this.productid=productid;
        this.name= name;
        this.price=price;
    }
    public double calculateDiscounted(int days){
        return price*days;
    }
        public void displayproductDetails() {
        
        }
       }
        class Electronics extends Product{
            public Electronics(String productid,String name,double price){
                super(productid,name,price);
            }
            public double calculateDiscounted(){
                return price*0.9;
            }
            public void displayproductDetails(){
                System.out.println(productid+"/"+name+  "/"+"original price:$" +price+ "/"+"Discounted price:$" +calculateDiscounted());
                }
    }
    class Clothing extends Product{
        public Clothing(String productid,String name,double price){
            super(productid,name,price);
        }
        public double calculateDiscounted()
        {
            return price*0.85;
        }
    
    }
    public class OnlineShoppingSystem{
        public static void main(String[] args) {
            Product laptop=new Electronics("P111", "laptop", 1000);
            Product shirt=new Clothing("c202", "T shirt", 50);
            laptop.displayproductDetails();
            shirt.displayproductDetails();
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------
abstract class Product{
    String productid,name;
     double price;

    public Product(String productid,String name,double price){
        this.productid=productid;
        this.name= name;
        this.price=price;
    }
    public double calculateDiscounted(int days){
        return price*days;
    }
        public void displayproductDetails() {
        
        }
       }
        class Electronics extends Product{
            public Electronics(String productid,String name,double price){
                super(productid,name,price);
            }
            public double calculateDiscounted(){
                return price*0.9;
            }
            public void displayproductDetails(){
                System.out.println(productid+"/"+name+  "/"+"original price:$" +price+ "/"+"Discounted price:$" +calculateDiscounted());
                }
    }
    class Clothing extends Product{
        public Clothing(String productid,String name,double price){
            super(productid,name,price);
        }
        public double calculateDiscounted()
        {
            return price*0.85;
        }
        public void displayproductDetails(){
                System.out.println(productid+"/"+name+  "/"+"original price:$" +price+ "/"+"Discounted price:$" +calculateDiscounted());
                }
    
    }
    public class OnlineShoppingSystem{
        public static void main(String[] args) {
            Product laptop=new Electronics("P111", "laptop", 1000);
            Product shirt=new Clothing("c202", "T shirt", 50);
            laptop.displayproductDetails();
            shirt.displayproductDetails();
    }
}
----------------------------------------------------------------------------------------------------------------------------------------
BYTE STREAM

import java.io.*;
public class ByteStream {
    public static void main (String []args)throws IOException{
        FileInputStream in = new FileInputStream ("bala.txt");
        FileOutputStream out = new FileOutputStream ("output.txt");
        int b;
        while ((b=in.read())!=-1){
            out.write(b);
        } 
        in.close();
        out.close();
        System.out.println("File copied using byte stream.");
    }
}
-------------------------------------------------------------------------------------------------
CHARACTER STREAM FILE
import java.io.*;
public class CharacterStream {
    public static void main (String []args)throws IOException{
        FileReader rea=new FileReader ("hlo.txt");
        FileWriter writ=new FileWriter ("hi.txt");
        int ch;
        while((ch=rea.read())!=-1){
            writ.write(ch);
        }
        rea.close();
        writ.close();
        System.out.println("File copies using character stream");
    }
    
}
-----------------------------------------------------------------------------------------------------
import java.util.*;

public class ReverseWords {
    public static void main (String []args){
        System.out.print("Give the Sentence :");
        Scanner sc =new Scanner(System.in);
        String sentance=sc.nextLine();
        sc.close();
        System.out.println("Reversed word  :" +reversewords(sentance));
    }
    public static String reversewords(String str){
        String []word=str.split(" ");
        StringBuffer result=new StringBuffer();
        for(String wor:word){
           StringBuffer sb=new StringBuffer(wor);
           result.append(sb.reverse()).append(" ");

        }
        return result.toString().trim();
    }
    
}
---------------------------------------------------------------------------------------------------
